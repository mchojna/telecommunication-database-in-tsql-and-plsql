-- 1. PROCEDURA: GENEROWANIE RAPORTU SPRZEDAZY
CREATE PROCEDURE RAPORT_SPRZEDAZY @DATA DATE AS
BEGIN
	IF NOT EXISTS (SELECT 1 FROM UMOWA WHERE DATA_ROZPOCZECIA = @DATA)
	      PRINT 'BRAK SPRZEDAZY DLA PODANEJ DATY';
	ELSE
		BEGIN
		    SELECT P.NAZWA, SUM(P.CENA) "DOCHOD"
			FROM PAKIET P
			INNER JOIN OFERTA O ON O.ID_PAKIETU = P.ID_PAKIETU
			INNER JOIN UMOWA U ON U.ID_OFERTY = O.ID_OFERTY
			WHERE U.DATA_ROZPOCZECIA = @DATA
			GROUP BY P.NAZWA
				UNION
			SELECT 'SUMA', SUM(P.CENA) 
			FROM PAKIET P
			INNER JOIN OFERTA O ON O.ID_PAKIETU = P.ID_PAKIETU
			INNER JOIN UMOWA U ON U.ID_OFERTY = O.ID_OFERTY
			WHERE U.DATA_ROZPOCZECIA = @DATA;
		END
END;

-- 2. PROCEDURA: GENEROWANIE LISTY UMOW DO ODNOWIENIA
CREATE PROCEDURE RAPORT_UMOW_DO_ODNOWIENIA @LICZBA_MIESIECY INT = 6 AS
BEGIN
    IF @LICZBA_MIESIECY <= 0
    BEGIN
        PRINT 'LICZBA MIESIECY MUSI BYC WIEKSZA OD ZERA.';
    END 
	ELSE
    BEGIN
		SELECT OS.IMIE, OS.NAZWISKO, NT.NR_TELEFONU, UM.ID_UMOWY, UM.DATA_ZAKONCZENIA
		FROM OSOBA OS
		INNER JOIN KLIENT KL ON KL.ID_KLIENTA = OS.ID_OSOBY
		INNER JOIN NUMER_TELEFONU NT ON NT.ID_KLIENTA = KL.ID_KLIENTA
		INNER JOIN OFERTA OE ON OE.NR_TELEFONU = NT.NR_TELEFONU
		INNER JOIN UMOWA UM ON UM.ID_OFERTY = OE.ID_OFERTY
		WHERE DATEDIFF(MONTH, GETDATE(), UM.DATA_ZAKONCZENIA) <= @LICZBA_MIESIECY AND UM.DATA_ZAKONCZENIA >= GETDATE();
	END;
END;

-- 3. PROCEDURA: USUNIECIE STARYCH ZGOD MARKETINGOWYCH
CREATE PROCEDURE USUN_STARE_ZGODY AS
BEGIN
    IF EXISTS (SELECT 1 FROM ZGODA_KLIENT WHERE DATA_ZAKONCZENIA < GETDATE())
    BEGIN
        DELETE FROM ZGODA_KLIENT
        WHERE DATA_ZAKONCZENIA < GETDATE();
        
        PRINT 'USUNIETO ' + CAST(@@ROWCOUNT AS VARCHAR) + ' WIERSZY ZGODY MARKETINGOWEJ.';
    END
    ELSE
    BEGIN
        PRINT 'BRAK STARYCH ZGOD DO USUNIECIA.';
    END
END;

-- 1. WYZWALACZ: PRZYPISANIE NOWYM KLIENTOM ZGOD MARKETINGOWYCH
CREATE TRIGGER DODAJ_ZGODY_DLA_NOWYCH_KLIENTOW
ON KLIENT
FOR INSERT
AS
BEGIN
    DECLARE @ID_KLIENTA INT;
    DECLARE @ID_ZGODY INT;
    DECLARE @DATA_ROZPOCZECIA DATE = GETDATE();
    DECLARE @DATA_ZAKONCZENIA DATE = DATEADD(YEAR, 2, GETDATE());
    
    DECLARE ZGODA_MARKETINGOWA_KURSOR CURSOR FOR
        SELECT ID_ZGODY
        FROM ZGODA_MARKETINGOWA;

    SELECT @ID_KLIENTA = ID_KLIENTA FROM INSERTED;
	
	DECLARE @ID_ZGODY_KLIENTA INT;
    SELECT @ID_ZGODY_KLIENTA = MAX(ISNULL(ID_ZGODY_KLIENTA, -1)) + 1 FROM ZGODA_KLIENT;

    OPEN ZGODA_MARKETINGOWA_KURSOR;
    FETCH NEXT FROM ZGODA_MARKETINGOWA_KURSOR INTO @ID_ZGODY;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        INSERT INTO ZGODA_KLIENT (ID_ZGODY_KLIENTA, ID_KLIENTA, ID_ZGODY, DATA_ROZPOCZECIA, DATA_ZAKONCZENIA)
        VALUES (@ID_ZGODY_KLIENTA, @ID_KLIENTA, @ID_ZGODY, @DATA_ROZPOCZECIA, @DATA_ZAKONCZENIA);

        SET @ID_ZGODY_KLIENTA = @ID_ZGODY_KLIENTA + 1;

        FETCH NEXT FROM ZGODA_MARKETINGOWA_KURSOR INTO @ID_ZGODY;
    END;

    CLOSE ZGODA_MARKETINGOWA_KURSOR;
    DEALLOCATE ZGODA_MARKETINGOWA_KURSOR;
END;

-- 2. WYZWALACZ: AUTOMATYCZNA ZMIANA KIEROWNIKA GDY OBECNY ZOSTANIE USUNIETY
CREATE TRIGGER ZMIANA_KIEROWNIKA_PRZY_USUNIECIU
ON PRACOWNIK
INSTEAD OF DELETE
AS
BEGIN
    DECLARE @ID_KIEROWNIKA INT;
    DECLARE @ID_NOWEGO_KIEROWNIKA INT;

    SELECT @ID_KIEROWNIKA = ID_PRACOWNIKA FROM DELETED;

    SELECT TOP 1 @ID_NOWEGO_KIEROWNIKA = ID_PRACOWNIKA FROM PRACOWNIK 
        WHERE DATA_ZATRUDNIENIA = (SELECT MIN(DATA_ZATRUDNIENIA) FROM PRACOWNIK WHERE ID_PRACOWNIKA <> @ID_KIEROWNIKA);

    IF @ID_NOWEGO_KIEROWNIKA IS NOT NULL
    BEGIN
        UPDATE PRACOWNIK
        SET ID_KIEROWNIKA = @ID_NOWEGO_KIEROWNIKA
        WHERE ID_KIEROWNIKA = @ID_KIEROWNIKA AND ID_PRACOWNIKA <> @ID_NOWEGO_KIEROWNIKA;
        -- DELETE FROM PRACOWNIK WHERE ID_PRACOWNIKA = @ID_KIEROWNIKA;
    END
    ELSE
    BEGIN
        PRINT 'BRAK NOWEGO KIEROWNIKA DO PRZYPISANIA';
    END;

    DELETE FROM PRACOWNIK WHERE ID_PRACOWNIKA = @ID_KIEROWNIKA;
END;

-- 3. WYZWALACZ: WALIDACJA DLUGOSCI NUMERU TELEFONU
CREATE TRIGGER WALIDACJA_NUMERU_TELEFONU
ON NUMER_TELEFONU
FOR INSERT
AS
BEGIN
    DECLARE @NR_TELEFONU CHAR(9);

    SELECT @NR_TELEFONU = NR_TELEFONU FROM INSERTED;

    IF LEN(LTRIM(RTRIM(@NR_TELEFONU))) <> 9
    BEGIN
		PRINT 'NUMER TELEFONU POWINIEN MIEC DOKLADNIE 9 CYFR';
        ROLLBACK;
    END;
END;